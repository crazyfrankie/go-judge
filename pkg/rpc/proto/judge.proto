syntax = "proto3";

package rpc;

option go_package = "/rpc";

message JudgeRequest {
  Language language = 1;
  int64 problem_id = 2;
  int64 uid = 3;
  string code = 4;
  string full_template = 5;
  string type_definition = 6;
  repeated string input = 7;
  repeated string output = 8;
  string max_mem = 9;  // MB
  string max_time = 10; // ms
}

enum Language {
  go = 0;
  java = 1;
  cpp = 2;
  python = 3;
}

// 简化的判题响应，类似LeetCode风格
message JudgeResponse {
  // 如果全部通过，返回最优结果；如果有错误，返回错误结果
  Result result = 1;
  
  // 总体统计信息
  OverallStatistics overall = 2;
}

// 最优结果或错误结果
message Result {
  Status status = 1;
  int64 time_used = 2;                   // 执行时间（毫秒）
  int64 memory_used = 3;                 // 内存使用（字节）
  string output = 4;                     // 实际输出（错误时显示）
  string expected_output = 5;            // 期望输出（错误时显示）
  
  // 格式化显示信息
  string status_runtime = 6;             // "0 ms" 或 "150 ms" 
  string status_memory = 7;              // "3.4 MB"
  string status_msg = 8;                 // "Accepted", "Wrong Answer"
  
  // 性能百分位（仅AC时有意义）
  uint32 runtime_percentile = 9;         // 运行时间百分位 (0-100)
  uint32 memory_percentile = 10;         // 内存百分位 (0-100)
  
  // 错误信息（仅错误时填充）
  string error_message = 11;             // 详细错误信息
  string testcase_input = 12;            // 失败的测试用例输入
  int32 failed_testcase_index = 13;      // 失败的测试用例索引（从0开始）
}

// 总体统计信息
message OverallStatistics {
  uint32 total_testcases = 1;            // 总测试用例数
  uint32 total_correct = 2;              // 通过的测试用例数
  string compare_result = 3;             // 测试结果："1111..." 或 "110X"（X表示在此失败）
  
  // 时间和内存统计（仅全部AC时有效）
  int64 total_time = 4;                  // 总执行时间（毫秒）
  int64 max_memory = 5;                  // 最大内存使用（字节）
  int64 avg_memory = 6;                  // 平均内存使用（字节）
  
  // 元数据
  Status final_status = 7;               // 最终状态
  string submission_id = 8;              // 提交ID
  uint64 task_finish_time = 9;           // 完成时间戳
  bool finished = 10;                    // 是否完成
  
  // 整体性能百分位（基于最优结果）
  uint32 overall_runtime_percentile = 11; // 整体运行时间百分位
  uint32 overall_memory_percentile = 12;  // 整体内存百分位
}

enum Status {
  status_accepted = 0;
  status_wrong_answer = 1;
  status_time_limit_exceeded = 2;
  status_memory_limit_exceeded = 3;
  status_runtime_error = 4;
  status_compilation_error = 5;
}

service JudgeService {
  rpc Judge(JudgeRequest) returns (JudgeResponse);
}