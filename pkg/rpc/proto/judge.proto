syntax="proto3";

package rpc;

option go_package = "/rpc";

message JudgeRequest {
  Language language = 1;
  int64 problem_id = 2;
  int64  uid = 3;
  string code = 4;
  string full_template = 5;
  string type_definition = 6;
  repeated string input = 7;
  repeated string output = 8;
  string max_mem = 9;
  string max_time = 10;
}

enum Language {
  go = 0;
  java = 1;
  cpp = 2;
  python = 3;
}

message JudgeResponse {
  repeated Result results = 1;
}

message Result {
  Status status = 1;
  int64 TimeUsed = 2;
  int64 MemoryUsed  = 3; //in bytes
  string output = 4;
  string expected_output = 5;
}

enum Status {
    status_accepted = 0;
    status_wrong_answer = 1;
    status_time_limit_exceeded = 2;
    status_memory_limit_exceeded = 3;
    status_runtime_error = 4;
    status_compilation_error = 5;
}

service JudgeService {
  rpc Judge(JudgeRequest) returns (JudgeResponse);
}

service RunnerService {
  rpc Run(JudgeRequest) returns (JudgeResponse);
}